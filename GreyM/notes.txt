TODO: Virtualize branch redirection. E.g. JE, JNE
How? Keep information about where to jump, how big the instruction is, if not jump.

Add code that executes before entry point. Why?
In case for some reason, someone removed the TLS callbacks, we have to ensure that they were called
to prevent someone from fixing up imports themselves.
Add the integrity checks there as well.

Turn all VM instructions into universal instructions, meaning:
a struct that all instructions are, including the size, maybe?

https://github.com/corkami/docs/blob/master/PE/PE.md

IN TLS CALLBACKS:
Create new thread that checks for debugger, but make it ThreadHideFromDebugger
Ensure that it is hidden from debugger, otherwise, close program?

USE ANTI DEBUGGING METHOD FROM GWINMEM_TEST
VERY GOOD, ALSO AGAINST SCYLLA


IN THE LOADER SHELLCODE, INSTEAD OF ONLY CALL[RSP-8], RANDOMIZE IT BETWEEN A CALL AND A JUMP THAT SIMULATED A CALL BY PUSHING RET ADD TO STACK

TLS CALLBACK 1:
Fix the address in the tls callback 2
TLS CALLBACK 2:
Dynamically add a new TLS callback

OBJECTIVE

TODO:
	Make the TLS callback add dynamic callback that executes code against debugger and shit

TODO: Replace the pdb path with a link or something funny

TODO: Consider turning every instruction into several instructions
	Turn into garbage code?
	Turn into code that does one thing, than later on after more garbage is undoes that thing?

TODO: All the INT3 instructions between functions can be replaced with
BOGUS code to catch of disassemblers.
